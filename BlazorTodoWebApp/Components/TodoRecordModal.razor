@if (ShowDialog)
{
    <div class="modal fade show d-block" id="weekModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="titleLabel">Add New Week Record</h5>
                    <button type="button" class="close btn btn-primary" @onclick="@Close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@todoRecord" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label for="lastName">Last name: </label>
                            <InputText id="lastName" class="form-control" @bind-Value="@todoRecord.FirstName" placeholder="Enter last name"></InputText>
                            <ValidationMessage For="@(() => todoRecord.FirstName)" />
                        </div>
                        <div class="form-group">
                            <label for="firstName">First name: </label>
                            <InputText id="firstName" class="form-control" @bind-Value="@todoRecord.LastName" placeholder="Enter first name"></InputText>
                            <ValidationMessage For="@(() => todoRecord.LastName)" />
                        </div>  
                        <br />
                        <br />
                        <button type="submit" class="btn btn-primary">Save</button>
                        <a class="btn btn-outline-primary" @onclick="@Close">Close</a>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}
@code {

    public bool windowVisible { get; set; }

    public TodoRecord todoRecord = new();

    public bool ShowDialog { get; set; }

    [Parameter]
    public EventCallback<bool> CloseEventCallback { get; set; }

    public void Show()
    {
        ResetDialog();
        ShowDialog = true;
        StateHasChanged();
    }

    public void Close()
    {
        ShowDialog = false;
        StateHasChanged();
    }

    private void ResetDialog()
    {
        todoRecord = new TodoRecord { };
    }

    protected async Task HandleValidSubmit()
    {
        _todoService.AddTodoRecord(todoRecord);
        ShowDialog = false;
        await CloseEventCallback.InvokeAsync(true);
        StateHasChanged();
    }

}
